'''

.. module:: analysis_tools.experiment

    :synopsis: Maintains experimentally controlled parameters and derived quantities.

    Module Level Classes:
    ----------------------
        Experiment : Maintain experimentally controlled parameter regimes and 
            derived quantities.

.. moduleauthor:: Riddhi Gupta <riddhi.sw@gmail.com>

'''

from __future__ import division, print_function, absolute_import
import numpy as np


class Experiment(object):
    ''' Maintain experimentally controlled parameters and derived quantities.

    Attributes:
    ----------
        expt_params : List of key experimental parameters.
        n_train (`int`) : Number of time-steps / training points for state estimation.
        n_predict  (`int`) : Number of time-steps / prediction points for forecasting.
        n_testbefore  (`int`) : Number of time-steps before n_train.
        bandwidth  (`float64`) : Assumed/implicit bandwidth of the unknown (true) signal.
        multiplier  (`float64`) : Nquist multiplier, r>2 for no aliasing.
        number_of_points  (`int`) : Total number of points for simulation i.e n_train + n_predict.
        fs  (`float64`) : Experimentally controlled sampling frequency.
        Delta_S_Sampling  (`float64`) : Frequency domain spacing.
        Delta_T_Sampling  (`float64`) : Time domain spacing (1/fs) (time between measurements).
        Frequency_Axis  (`float64`) : Frequency bins generated in discrete Fourier space.
        Time_Axis  (`float64`) : Time bins generated by Delta_T_Sampling and number_of_points.

    Methods:
    -------
        experiment_params : Return consistent time and frequency attributes of Experiment
            class based on experiment parameters.
    '''

    def __init__(self, expt_params):
        ''' Initiates an instance of Experiment class.'''

        # Experimental params
        self.expt_params = expt_params
        self.n_train = int(expt_params[0])
        self.n_predict = int(expt_params[1])
        self.n_testbefore = int(expt_params[2])
        self.multiplier = expt_params[3]
        self.bandwidth = expt_params[4]

        self.number_of_points, self.fs, self.Delta_S_Sampling, self.Delta_T_Sampling, self.Frequency_Axis, self.Time_Axis = self.experiment_params()


    def experiment_params(self):
        ''' Return number of points, sampling rate, Fourier resolution, time
        between measurements, frequency and time axes for an Experiment instance.
        '''

        self.number_of_points = self.n_predict + self.n_train
        self.fs = self.bandwidth*self.multiplier
        self.Delta_S_Sampling = self.fs/self.number_of_points
        self.Delta_T_Sampling = 1.0/self.fs

        self.Frequency_Axis = np.fft.fftfreq(self.number_of_points, d=self.Delta_T_Sampling)

        self.Time_Axis = np.zeros(self.number_of_points)
        taxis = 0
        for taxis in range(0, self.number_of_points, 1):
            self.Time_Axis[taxis] = taxis*self.Delta_T_Sampling

        return self.number_of_points, self.fs, self.Delta_S_Sampling, self.Delta_T_Sampling, self.Frequency_Axis, self.Time_Axis

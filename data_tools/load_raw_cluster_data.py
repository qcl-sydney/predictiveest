'''
Created on Thu Apr 20 19:20:43 2017
@author: riddhisw


.. module:: data_tools.load_raw_cluster_data

    :synopsis: Load data and analyse data generated by any algorithm (LKFFB, AKF, LSF, GPR)
        for any scenario (test_case, variation). Moducle class acts as data container
        that pulls together data output from different algorithms under one single instance,
        indexed by test case and variation number.

    Module Level Classes:
    ----------------------
        LoadExperiment : LoadExperiment instantiates a data container that takes output
            from LSF, AKF, LKFFB and GPR npz files and stores all data as class attributes.

.. moduleauthor:: Riddhi Gupta <riddhi.sw@gmail.com>
'''

from __future__ import division, print_function, absolute_import
import numpy as np
from analysis_tools.experiment import Experiment
from analysis_tools.truth import Truth

ALGO = ['LSF', 'AKF', 'GPRP', 'LKFFB', 'QKF']
FILENAME_DICT = {'AKF': '_BR_AKF_MAP_correctQ_.npz',
                 'LSF': '_LS_Ensemble.npz',
                 'LKFFB': 'BR_Map.npz',
                 'GPRP': '_GPR_PER_.npz',
                 # 'QKF': 'BR_QKF_Map_correct_Q.npz'} # AKF Q Matrix (tag: correct_Q)
                 'QKF': 'BR_QKF_Map_II.npz'} # Stablised Q Matrix [in paper]

class LoadExperiment(object):
    '''
    LoadExperiment instantiates a data container that takes output from LSF, AKF, LKFFB and
    GPR npz files and stores all data as class attributes. Each experiment is
    uniquely indexed by (test_case, variation) numbers.

    Additionally, if LKFFB is loaded, then LoadExperiment instances Experiment
    and Truth class objects from analysis_tools package. The data attributes of
    these class objects can then be accessed quickly for analysis and figure plotting.

    Attributes:
    ----------
        test_case (`int`) : Index value to label parameter regimes, as
            in KalmanParameterRegimes.ods.
        variation (`int`) : Index value to label scanning parameter in a global
            fixed parameter regime, as in KalmanParameterRegimes.ods.
        skip (`int`) : Number of measurements skipped during KF analysis.
        *_load (`str`, optional):  Yes/No flag to load data for each algorithm.
        *_path (`str`, optional): Specifies where to find  Bayes Risk .npz file, if
            corresponding *_load variable is set to 'Yes'.
    '''

    def __init__(self, test_case, variation,
                 skip=1,
                 GPRP_load='Yes', GPRP_path='./LS_Ensemble_Folder/',
                 LKFFB_load='Yes', LKFFB_path='./',
                 AKF_load='Yes', AKF_path='./LS_Ensemble_Folder/',
                 LSF_load='Yes', LSF_path='./LS_Ensemble_Folder/',
                 QKF_load='No', QKF_path='./'):

        self.test_case = test_case
        self.variation = variation

        for item in ALGO:
            setattr(LoadExperiment, item+'_load', vars()[item+'_load'])
            setattr(LoadExperiment, item+'_path', vars()[item+'_path'])

            #if item == 'LKFFB':
            #    setattr(LoadExperiment, item+'_path', vars()[item+'_path']+'test_case_'+str(self.test_case)+'/')

            if getattr(LoadExperiment, item+'_load') == 'Yes':

                print(item +': Data Loaded? ' + getattr(LoadExperiment, item+'_load'))
                filename = getattr(LoadExperiment, item+'_path')+'test_case_'+str(self.test_case)+'_var_'+str(self.variation)+FILENAME_DICT[item]
                data_object = np.load(filename)
                for idx_data in data_object.files:
                    setattr(LoadExperiment, item+'_'+idx_data, data_object[idx_data])

                if item == 'LKFFB':
                    setattr(LoadExperiment, 'Expt', Experiment(getattr(LoadExperiment, 'LKFFB_expt_params')))
                    true_noise_params = [0.0] + [idx_tr for idx_tr in data_object['true_noise_params']]
                    setattr(LoadExperiment, 'Truth', Truth(true_noise_params, num=self.Expt.number_of_points, DeltaT=self.Expt.Delta_T_Sampling))
                    setattr(LoadExperiment, 'MsmtSTD', self.LKFFB_msmt_noise_variance)
